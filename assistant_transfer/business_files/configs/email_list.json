#!/usr/bin/env python3
import imaplib
import email
import json
import os
from datetime import datetime

class EmailMonitor:
    def __init__(self, config_path='~/business_files/configs/email_list.json'):
        self.config_path = os.path.expanduser(config_path)
        self.load_config()

    def load_config(self):
        with open(self.config_path, 'r') as f:
            self.email_config = json.load(f)

    def connect_to_email(self, email_config):
        """
        Connect to email server using IMAP
        Note: Requires app-specific passwords or OAuth
        """
        try:
            mail = imaplib.IMAP4_SSL('imap.gmail.com')
            mail.login(email_config['email'], 'your_app_specific_password')
            return mail
        except Exception as e:
            print(f"Error connecting to {email_config['email']}: {e}")
            return None

    def monitor_emails(self):
        """
        Monitor primary business emails
        """
        for email_config in self.email_config['primary_business_emails']:
            mail = self.connect_to_email(email_config)
            if mail:
                mail.select('inbox')
                # Search for unread emails
                _, search_data = mail.search(None, 'UNSEEN')
                
                for num in search_data[0].split():
                    _, data = mail.fetch(num, '(RFC822)')
                    raw_email = data[0][1]
                    email_message = email.message_from_bytes(raw_email)
                    
                    # Log email details
                    self.log_email(email_message, email_config['email'])

    def log_email(self, email_message, source_email):
        """
        Log email details for AI processing
        """
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'source_email': source_email,
            'subject': email_message['Subject'],
            'from': email_message['From'],
            'priority': 'high'  # Can be dynamically determined
        }
        
        # Save to log file
        log_path = os.path.expanduser('~/business_files/logs/email_monitor.log')
        with open(log_path, 'a') as log_file:
            json.dump(log_entry, log_file)
            log_file.write('\n')

def main():
    email_monitor = EmailMonitor()
    email_monitor.monitor_emails()

if __name__ == "__main__":
    main()

